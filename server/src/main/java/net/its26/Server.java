/*
 * This source file was generated by the Gradle 'init' task
 */
package net.its26;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Path;
import java.security.GeneralSecurityException;
import java.security.NoSuchAlgorithmException;
import java.security.PublicKey;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.util.Optional;

public class Server 
{
    private static final String PATH_CERT_ROOT = "/home/ernst/projects/KryptoProt/crypto_prot/KeysAndCerts/rootCA.crt";
    private static final String PATH_CERT_SERVER = "/home/ernst/projects/KryptoProt/crypto_prot/KeysAndCerts/serverCert.crt";


    public static void main(String[] args) 
    {
        Optional<X509Certificate> optCertRoot = createCertificate(PATH_CERT_ROOT);
        Optional<X509Certificate> optCertServer = createCertificate(PATH_CERT_SERVER);

        if (optCertRoot.isPresent() && optCertServer.isPresent())
        {
            PublicKey rootPublicKey = optCertRoot.get().getPublicKey();
            try
            {
                optCertServer.get().verify(rootPublicKey);
                String licenseAsBytes = Common.getByteArrayAsString(optCertServer.get().getEncoded());
                System.out.println(licenseAsBytes);
            }
            catch (GeneralSecurityException e)
            {
                System.err.println("Failed to verify certificate!");
            }

        }

        System.out.println("Certificate verified successfully.");

    }

    private static Optional<X509Certificate> createCertificate(String path)
    {
        X509Certificate cert = null;
        try (InputStream inStrm = new FileInputStream(path))
        {
            CertificateFactory cf = CertificateFactory.getInstance("X.509");
            cert = (X509Certificate)cf.generateCertificate(inStrm);
        }
        catch(IOException | CertificateException e)
        {
            System.err.println("Could not open certificate file: " + e.toString());
        }

        return Optional.ofNullable(cert);
    }
}
