/*
 * This source file was generated by the Gradle 'init' task
 */
package net.its26;

import java.io.IOException;
import java.net.Socket;
import java.security.KeyPair;
import java.security.interfaces.ECPrivateKey;
import java.security.interfaces.ECPublicKey;
import java.security.spec.ECPoint;
import java.util.Optional;

public class Alice 
{
    private static final String BOBS_IP = "localhost";
    private static final int BOBS_PORT = 12345;

    public static void main(String[] args) 
    {
        try (Socket socket = new Socket(BOBS_IP, BOBS_PORT)) 
        {
            // Long term keys
            assert(MQV.longTermKeyAlice.isPresent());
            assert(MQV.longTermKeyBob.isPresent());
            KeyPair longTermKeys = MQV.longTermKeyAlice.get();
            // We are only using Bob's public long term key here 
            ECPublicKey longTermPubKeyBob = (ECPublicKey)MQV.longTermKeyBob.get().getPublic();

            // Generate Alice's session key pair
            Optional<KeyPair> optSessionKeys = EC.generateKeyPair();
            assert(optSessionKeys.isPresent());
            KeyPair sessionKeys = optSessionKeys.get();

            // Send public session Key to Bob
            ECPublicKey sessionPubKeyAlice = (ECPublicKey)sessionKeys.getPublic();

            byte[] txPublicSessionKeyMessage = MQV.generateMQVSessionKeyMessage(sessionPubKeyAlice);
            MQV.sendMessage(txPublicSessionKeyMessage, socket.getOutputStream());

            // Receive public session key from Bob
            byte[] rxPublicSessionKeyMessage = MQV.receiveMessage(socket.getInputStream());
            Optional<ECPublicKey> optSessionPubKeyBob = MQV.parseMQVSessionKeyMessage(rxPublicSessionKeyMessage, longTermPubKeyBob.getParams());
            assert(optSessionPubKeyBob.isPresent());

            // Calculate common secret, generate a hash out of it
            ECPoint secret = EC.generateSecret(sessionKeys, (ECPrivateKey)longTermKeys.getPrivate(), optSessionPubKeyBob.get(), longTermPubKeyBob);
            Optional<byte[]> optDigest = EC.getSHA256(secret);
            assert(optDigest.isPresent());
            System.out.println("Common hashed secret:");
            MQV.printByteArray(secret.getAffineY().toByteArray());
        } 
        catch (IOException e) 
        {
            e.printStackTrace();
        }
    }
}
