/*
 * This source file was generated by the Gradle 'init' task
 */
package net.its26;

import java.io.IOException;
import java.net.Socket;
import java.util.Optional;

public class Mallory 
{
    private static final byte[] STOLEN_SESSION_KEY = 
    {
        (byte)0xaf, (byte)0xfe, (byte)0xaf, (byte)0xfe, (byte)0xaf, (byte)0xfe, (byte)0xaf, (byte)0xfe,
        (byte)0xaf, (byte)0xfe, (byte)0xaf, (byte)0xfe, (byte)0xaf, (byte)0xfe, (byte)0xaf, (byte)0xfe
    };

    private static final byte[] STOLEN_SESSION_REQUEST_WITH_KNOWN_SESSION_KEY = 
    {
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x03,
        (byte)0xE6, (byte)0x9D, (byte)0xCA, (byte)0x23, (byte)0xD7, (byte)0x1D, (byte)0xFB, (byte)0xA4, 
        (byte)0x7A, (byte)0x9D, (byte)0x5E, (byte)0xC7, (byte)0x04, (byte)0xCF, (byte)0xF0, (byte)0x00,
        (byte)0x4C, (byte)0xD1, (byte)0xCF, (byte)0x9E, (byte)0xE8, (byte)0x69, (byte)0x9D, (byte)0xDC, 
        (byte)0x45, (byte)0x06, (byte)0x49, (byte)0x5E, (byte)0xD9, (byte)0x5F, (byte)0x87, (byte)0xCD, 
        (byte)0x60, (byte)0xCF, (byte)0x1F, (byte)0x60, (byte)0x35, (byte)0x8D, (byte)0xF6, (byte)0xF0, 
        (byte)0x79, (byte)0xB2, (byte)0xF7, (byte)0x16, (byte)0x25, (byte)0xE3, (byte)0xE3, (byte)0x1A
    };

    public static void main(String[] args) 
    {
        try (
            Socket socketBob = new Socket(Common.BOB_IP_ADDRESS, Common.BOB_LISTEN_PORT)) 
        {
            // Forward encrypted payload to Bob
            Common.sendMessage(STOLEN_SESSION_REQUEST_WITH_KNOWN_SESSION_KEY, socketBob.getOutputStream());

            byte[] responseBob = Common.receiveMessage(socketBob.getInputStream());
            // Verify correct message id from Bob            
            if (Common.getMessageId(responseBob) != Common.NHS.SESSION_RESPONSE.id)
            {
                return;
            }
            // Verify correctly received nonce from Bob
            Optional<Integer> optNonce = Common.parseSessionResponse(responseBob, STOLEN_SESSION_KEY);
            if (!optNonce.isPresent())
            {
                return;
            }

            // Reduce Nonce by one to prove we are in fact Alice
            int nonce2 = (optNonce.get().intValue()) - 1;
            Optional<byte[]> optResponseAck = Common.generateSessionResponseAck(nonce2, STOLEN_SESSION_KEY);

            if (optResponseAck.isPresent())
            {
                Common.sendMessage(optResponseAck.get(), socketBob.getOutputStream());
            }

            byte[] finalMessageBob = Common.receiveMessage(socketBob.getInputStream());
            Optional<byte[]> optFinalMsgBobPlain = Common.makeClearText(finalMessageBob, STOLEN_SESSION_KEY);
            if (optFinalMsgBobPlain.isPresent())
            {
                System.out.println("Received message from Bob:");
                System.out.println(new String(optFinalMsgBobPlain.get()));
            }
        } 
        catch (IOException e) 
        {
            e.printStackTrace();
        }
    }
}
